# coding=utf-8
import shutil
from time import sleep
from random import randint
import os
import telebot
import threading

# ----------------------------------------------------------------------------
token_bot = '1654475418:AAHZ8MOBnHgH2t66qL4jvSbsrUqrFymufF8'
bot = telebot.TeleBot(token_bot)
flag_for_schedule = 0
keyboard_hider = telebot.types.ReplyKeyboardRemove()
channel_id = "@pt_demid"

users = {

}

#------------------------------Tread start----------------------------------

#------------------------------States----------------------------------------
user_states = {}

S_NOSUB = "0"  # –ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
S_START = "1"
S_ENTER_NAME = "2"
S_SEND_PIC = "3"

# -----------------------------Text-------------------------------------------

def is_subscribed(channel_id, user_id):
    status = ['creator', 'administrator', 'member']
    user_status = str(bot.get_chat_member(channel_id, user_id).status)
    if user_status in status:
        return True
    else:
        return False

@bot.message_handler(content_types=["text"])
def get_text_messages(message):
    chat_id = message.from_user.id
    if chat_id not in user_states:
        user_states[chat_id] = S_NOSUB
    if not is_subscribed(channel_id, message.from_user.id):
        user_states[chat_id] = S_NOSUB
        bot.send_message(message.chat.id, "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ @pt_demid, –∞ –∑–∞—Ç–µ–º –æ–ø—è—Ç—å –Ω–∞–ø–∏—à–∏ /start")
    else:
        user_states[chat_id] = S_START
        main_func(message)


#------------------------------Main logic--------------------------------------

def main_func(message):
    chat_id = message.chat.id
    if message.text == "/start":
        markup = generate_start_markup()
        bot.send_message(message.chat.id,
                         "–ü—Ä–∏–≤–µ—Ç!\n–≠—Ç–æ —á–∞—Ç-–±–æ—Ç PrimeTime –¥–ª—è –≤–∞–ª–µ–Ω—Ç–∏–Ω–æ–∫. –ü–æ—Ä–∞–¥—É–π –≤–µ—Å—Ç–æ—á–∫–æ–π –≤—Ç–æ—Ä—É—é –ø–æ–ª–æ–≤–∏–Ω–∫—É, –¥—Ä—É–∑–µ–π –∏–ª–∏ —Å–≤–æ–µ–≥–æ –∫—Ä–∞—à–∞. –ñ–¥–∏ –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∏ –≤–µ—á–µ—Ä–æ–º 14 —Ñ–µ–≤—Ä–∞–ª—è.\n\n–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üîΩ",
                         reply_markup=markup)
    elif message.text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É":
        user_states[chat_id] = S_ENTER_NAME
        bot.send_message(message.chat.id,
                         "–°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏, –∫–æ–º—É —Ç—ã —Ö–æ—á–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É. –î–ª—è —ç—Ç–æ–≥–æ —É–∫–∞–∂–∏ –Ω–∏–∫ –≤ –∏–Ω—Å—Ç–∞–≥—Ä–∞–º–º–µ/id –≤–æ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ.",
                         reply_markup=keyboard_hider)
        bot.register_next_step_handler(message, get_valentine)


def get_valentine(message):
    if user_states[message.chat.id] == S_ENTER_NAME:
        users[message.from_user.id] = message.text
        bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É")
        user_states[message.chat.id] = S_SEND_PIC


# -----------------------------Photo--------------------------------------------
@bot.message_handler(content_types=["photo"])
def get_photo_messages(message):
    if user_states[message.chat.id] == S_SEND_PIC:
        to_who = users[message.from_user.id]
        to_who = to_who + "0"
        markup = generate_start_markup()
        fileID = message.photo[-1].file_id
        file_info = bot.get_file(fileID)
        downloaded_file = bot.download_file(file_info.file_path)
        photo_name = to_who + ".jpg"
        backup_name = to_who[:-1]
        photo_name = photo_name.translate({ord(c): None for c in '?!/;:\\'})
        backup_path_name = photo_name
        with open(photo_name, 'wb') as new_file:
            new_file.write(downloaded_file)
        i = 1
        while True:
            if os.path.exists("photo/" + photo_name):
                to_who = to_who[:-1]
                to_who = to_who + str(i)
                i = i + 1
                photo_name = to_who + ".jpg"
            else:
                os.rename(backup_path_name, photo_name)
                shutil.move(photo_name, "photo")
                break
        bot.send_message(message.chat.id, "–°—É–ø–µ—Ä, " + backup_name + " –ø–æ–ª—É—á–∏—Ç —Ç–≤–æ—é –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É.", reply_markup=markup)
        users[message.from_user.id] = ""
        user_states[message.chat.id] = S_START
    else:
        bot.send_message(message.chat.id, "–î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏ –≤—Å–µ –ø—É–Ω–∫—Ç—ã –¥–æ —ç—Ç–æ–≥–æ!")

# -----------------------------keyboards----------------------------------------

def generate_start_markup():
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    button1 = telebot.types.KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É')
    markup.row(button1)
    return markup

#-----------------------------Other Listeners----------------------------------
@bot.message_handler(content_types=['sticker'])
def sticker_stop(message):
    print(message)
    bot.send_sticker(message.from_user.id, 'CAACAgQAAxkBAAIH1V79skuRxW2HHxSIguJ1xG3zN3T3AAJXBwACzfXABHlZqZRf_0W6GgQ')
    bot.send_message(message.from_user.id, "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —Å—Ç–∏–∫–µ—Ä–æ–≤, –ø–∏—à–∏ /start")


@bot.message_handler(content_types=['voice'])
def voice_stop(message):
    bot.send_message(message.from_user.id, "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —Ä–µ—á—å, –ø–∏—à–∏ /start")

if __name__ == '__main__':
    bot.infinity_polling()
